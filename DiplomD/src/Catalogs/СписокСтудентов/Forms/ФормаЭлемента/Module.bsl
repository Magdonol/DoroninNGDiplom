
&НаСервере
Процедура ПрофильНаправленияПриИзмененииНаСервере()
	Запрос = Новый запрос; 
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбразовательныеПрограммыПрофилиНаправления.НомерСтроки КАК НомерСтроки,
	               |	ОбразовательныеПрограммыПрофилиНаправления.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ОбразовательныеПрограммы.ПрофилиНаправления КАК ОбразовательныеПрограммыПрофилиНаправления
	               |ГДЕ
	               |	ОбразовательныеПрограммыПрофилиНаправления.ПрофилиНаправления = &ПрофилиНаправления
	               |	И ОбразовательныеПрограммыПрофилиНаправления.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ПрофилиНаправления",Объект.ПрофильНаправления); 
	Запрос.УстановитьПараметр("Ссылка",Объект.ОбразовательнаяПрограмма); 
	Рез = Запрос.Выполнить().Выбрать(); 
	рез.Следующий(); 
	Если ПустаяСтрока(рез.Ссылка) тогда 
		Сообщить("Выбарнный профиль специальности не относится к образовательной программе" + " " + Объект.ОбразовательнаяПрограмма); 
		Объект.ПрофильНаправления = "";  
	Иначе 
		Спр= Справочники.ПрофилиНаправления.НайтиПоНаименованию(Объект.ПрофильНаправления); 
		Объект.УровеньОбразования = Спр.УровеньОбразования; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильНаправленияПриИзменении(Элемент)
	ПрофильНаправленияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ГруппаПриИзмененииНаСервере()
	Спр = Справочники.Группы.НайтиПоНаименованию(Объект.Группа);
	Объект.ОбразовательнаяПрограмма = Спр.ОбразовательнаяПрограмма;
	Объект.ПрофильНаправления = Спр.ПрофильНаправления;
	Объект.ФормаОбучения = Спр.ФормаОбучения;
	Объект.УровеньОбразования = Спр.УровеньОбразования;
	Объект.Курс = Спр.Курс;
	Объект.СрокОбучения = Спр.СрокОбучения;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаПриИзменении(Элемент)
	ГруппаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьИСоздатьЗачетнуюКнижкуНаСервере()
	Если ПустаяСтрока(Объект.Код) Тогда 
		Сообщить("Необходимо записать и провести документ"); 
	Иначе 
		
	запрос = Новый запрос; 
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗачетнаяКнижкаСтудента.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ЗачетнаяКнижкаСтудента КАК ЗачетнаяКнижкаСтудента
	               |ГДЕ
	               |	ЗачетнаяКнижкаСтудента.Студент = &Студент
	               |	И ЗачетнаяКнижкаСтудента.Группа = &Группа";
	Запрос.УстановитьПараметр("Студент",Объект.Ссылка); 
	Запрос.УстановитьПараметр("Группа",Объект.Группа); 
	Рез = Запрос.Выполнить().Выбрать(); 
	Рез.Следующий(); 
	Если НЕ ПустаяСтрока(Рез.Ссылка) Тогда 
		Сообщить("ранее был создан документ зачетной книжки для студента (ки)" + " " + Объект.Ссылка); 
	Иначе 
		Док = Документы.ЗачетнаяКнижкаСтудента.СоздатьДокумент(); 
		Док.Дата = ТекущаяДата(); 
		Док.Студент = Объект.Ссылка; 
		Док.Группа = Объект.Группа; 
		Док.НомерЗачетнойКнижки = Объект.Код; 
		Док.ПрофильНаправления = Объект.ПрофильНаправления; 
		Попытка 
			Док.Записать(РежимЗаписиДокумента.Запись); 
			Док.Записать(РежимЗаписиДокумента.Проведение); 
			Сообщить("Создан документ зачетной книжки для студента (ки)" + " " + Объект.Ссылка); 
			Объект.НомерЗачетнойКнижки = Объект.Код; 
			Объект.ЗачетнаяКнижка = Док.Ссылка; 
			Объект.СтатусЗачисления= Истина; 
		Исключение 
			Сообщить("Документ зачетной книжки НЕ создан"); 
		КонецПопытки; 
	КонецЕсли; 
КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьИСоздатьЗачетнуюКнижку(Команда)
	ЗарегистрироватьИСоздатьЗачетнуюКнижкуНаСервере();
КонецПроцедуры
